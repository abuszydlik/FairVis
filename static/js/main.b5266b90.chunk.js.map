{"version":3,"sources":["data/compas_high_class_cluster.csv","util/generateSubgroups.js","util/clusterDescriptions.js","util/globals.js","workers/dataLoader.js","workers/WebWorker.js","components/ClassDistribution.js","components/MetricsDistribution.js","components/ExpandedCard.js","components/BoxPlot.js","components/FeatureDrawer.js","components/ClusterDistribution.js","util/neighboringClusters.js","components/GroupSuggestions.js","components/MetricSelector.js","components/StripPlot.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","createSubgroups","data","groups","nextId","allFeatures","allValues","sub","Map","groupFeatures","Object","keys","forEach","inst","key","vals","include","feat_name","v","includes","length","push","slice","old","get","undefined","set","insts","subgroups","metrics","i","group","fm","calculateFairnessMetrics","dist","f","thisVals","v_dist","item","entries","tuple","collator","Intl","Collator","numeric","sensitivity","distrib_arr","r","sort","a","b","compare","calcValueDist","id","feats","type","distrib","calculateSubgroupMetrics","m","items","n","tp","tn","fp","fn","predicted","Math","round","parseFloat","actual","parseInt","calculateBaseRates","size","acc","rec","spec","prec","npv","fnr","fpr","fdr","for","f1","k","isNaN","getClusters","features","splice","indexOf","all_atts","attr","s","Set","map","clustInstances","cluster","concat","toConsumableArray","clustDistributions","clustDistrib","feat","featDistrib","clustEntropies","_","clustEntr","arr","log2","shannonEntropy","clustDefining","orderedFeats","orderedVals","reduce","clusterid","SECONDARY_COLOR","TERTIARY_COLOR","METRICS","label","value","dataLoader","self","addEventListener","e","out","avgs","_loop","s_arr","Array","from","postMessage","WebWorker","worker","classCallCheck","this","code","toString","blob","Blob","Worker","URL","createObjectURL","$schema","mark","width","transform","calculate","as","encoding","y","field","axis","title","labelFontSize","labelPadding","x","aggregate","format","color","scale","domain","range","legend","ClassDistribution","props","clickedGroup","name","val","hoveredGroup","react_default","createElement","react_vega_lite_min_default","values","Component","height","spacing","row","padding","orient","axisWidth","offset","header","titleFontSize","labelAngle","labels","MetricsDistribution","_this","selectedMetrics","metric","styles","card","marginTop","marginRight","overflow","featureStyle","textAlign","avatar","backgroundColor","expand","margin","marginBottom","hovered","clicked","display","flexDirection","justifyContent","selectedGroups","ExpandedCard","export","activeGroups","text","filename","document","setAttribute","encodeURIComponent","click","saveText","JSON","stringify","nextProps","nextState","_this2","classes","featsClick","featsHov","hoveredCell","TableCell_default","clickedCell","align","Fragment","TableRow_default","Card_default","className","CardContent_default","Button_default","exportButton","variant","onClick","Divider_default","components_MetricsDistribution","components_ClassDistribution","Paper_default","Table_default","table","style","TableHead_default","tableHeader","TableBody_default","withStyles","boxWidth","boxHeight","BoxPlot","possibleConstructorReturn","getPrototypeOf","call","update","drawGlobalDistBar","dataDistrib","featName","featIndex","maxy","groupIndex","drawGroupDistBar","drawBar","d3","remove","feat_dist_arr","data_arr","bar_type","node","svg","append","state","left","top","rangeRound","d","hght","tip","d3tip","html","selectAll","enter","bandwidth","on","show","hide","right","bottom","ref","drawer","flexShrink","maxWidth","feature","button","listItem","paddingBottom","alignItems","listText","radio","divider","boxLabel","textTransform","fontSize","fontWeight","FeatureDrawer","compareState","oldState","newState","opened","checked","subchecked","handleToggle","newChecked","has","delete","add","setState","handleSubToggle","feat_i","item_i","_this$state","subnew","handleClick","newOpened","handleHover","j","selector","handleUnhover","handleClickSubgroup","val_arr","valIndex","max_ys","Drawer_default","paper","anchor","List_default","ListItem_default","Tooltip_default","placement","components_BoxPlot","ListItemSecondaryAction_default","Checkbox_default","onChange","disabled","Collapse_default","in","timeout","unmountOnExit","value_i","onMouseOver","onMouseOut","ListItemText_default","primary","order","ClusterDistribution","makeup","maxVal","paddingLeft","getNeighbors","subgroup","oneAwayGroups","same","diffFeatInd","ind","GroupSuggestions","mouseEnter","suggestedHover","mouseLeave","suggestedUnhover","mouseClick","suggestedClick","pageRight","page","clusters","pageLeft","changeView","target","showSimilar","neighbors","changeSort","clustersLoaded","similarGroups","neigh","index","onMouseEnter","onMouseLeave","cardContent","diffTable","index_es","featDiff","FormControl_default","Select_default","MenuItem_default","settings","Typography_default","sortText","headerDivider","cards","filter","clust","minSize","leftCell","cell","components_ClusterDistribution","paging","ChevronLeft_default","ChevronRight_default","marginLeft","justifyItems","fab","float","flexWrap","inputComponent","_ref","inputRef","objectWithoutProperties","assign","components","Control","TextField_default","fullWidth","InputProps","inputProps","objectSpread","selectProps","input","innerRef","children","innerProps","textFieldProps","Menu","square","MultiValue","Chip_default","tabIndex","classNames","chip","defineProperty","chipFocused","isFocused","onDelete","removeProps","deleteIcon","Cancel_default","NoOptionsMessage","noOptionsMessage","Option","buttonRef","selected","component","isSelected","Placeholder","placeholder","ValueContainer","valueContainer","MetricSelector","handleChange","onMetricChange","selectedOptions","suggs","suggestions","selectorWrapper","react_select_esm","options","isMulti","theme","minWidth","flex","unit","emphasize","palette","grey","position","zIndex","StripPlot","createStripPlot","xAxis","select","xScale","barHover","barClick","avgG","toFixed","yScale","tickPadding","ticks","tickFormat","prevProps","plot","createMuiTheme","main","secondary","overrides","MuiSlider","thumb","track","appBar","body","content","slider","reset","flexGrow","subtitle","loadingScreen","minHeight","loadingText","paddingTop","loadingProgress","App","classed","foundArr","el","newActives","changeMinSize","resetGroups","handleMetricsChange","dataLoaded","loaderWorker","data_output_and_clusters","then","core_styles","AppBar_default","Toolbar_default","inline","Slider_default","step","min","max","components_FeatureDrawer","components_MetricSelector","metricSelector","components_StripPlot","components_GroupSuggestions","components_ExpandedCard","CircularProgress_default","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5266b90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/compas_high_class_cluster.335219ea.csv\";","/** Since ES6 Maps do equality by reference, objects can't really be used as keys.\n *  Here we simply use a concatenated string as the key.\n **/\nexport function createSubgroups(data, groups, nextId, allFeatures, allValues) {\n  let sub = new Map();\n\n  let groupFeatures = Object.keys(groups)\n\n  data.forEach(inst => {\n    let key = \"\";\n    let vals = [];\n\n    let include = true\n\n    groupFeatures.forEach(feat_name => {\n\n      let v = inst[feat_name]\n      if (groups[feat_name].includes(v) || groups[feat_name].length === 0) {\n          vals.push(v)\n          key += v + \", \";\n      } else {\n        include = false\n      }\n\n    })\n\n    if (include) {\n      //  Remove last \", \"\n      key = key.slice(0, -2);\n\n      // If key doesn't exist add entry, else push to group\n      let old = sub.get(key);\n      if (old === undefined) {\n        sub.set(key, {vals: vals, insts: [inst] });\n      } else {\n        old[\"insts\"].push(inst);\n        sub.set(key, old);\n      }\n    }\n    \n  });\n  \n  return calculateSubgroupMetrics(sub, nextId, groupFeatures, allFeatures, allValues);\n}\n\n/**\n * Calculate Common Fairness Metrics\n * \n * @param counts: counts of tp, tn, fp, tn, p, n\n * Note: \n * acc = accuracy\n * rec = recall\n * prec = precision\n * spec = specificity\n * npv = negative predictive value\n * fnr = false negative rate or miss rate\n * fpr = false positive rate\n * fdr = false discovery rate\n * for = false omission rate\n * f1 = f1 score \n */\nexport function calculateFairnessMetrics(data) {\n  let m = calculateBaseRates(data);\n\n  let metrics = {\n    size: data.length,\n    p: 100 * m.p / data.length,\n    n: 100 * m.n / data.length,\n    acc: (100 * (m.tp + m.tn)) / (m.p + m.n),\n    rec: 100 * m.tp / (m.tp + m.fn),\n    spec: 100 * m.tn / (m.fp + m.tn),\n    prec: 100 * m.tp / (m.tp + m.fp),\n    npv: 100 * m.tn / (m.tn + m.fn),\n    fnr: 100 * m.fn / (m.fn + m.tp),\n    fpr: 100 * m.fp / (m.fp + m.tn),\n    fdr: 100 * m.fp / (m.fp + m.tp),\n    for: 100 * m.fn / (m.fn + m.tn),\n    f1: 100 * 2 * m.tp / (2*m.tp + m.fp + m.fn)\n  };\n\n  Object.keys(metrics).forEach(k => {\n    if (isNaN(metrics[k])) {\n      metrics[k] = 0;\n    }\n  });\n  \n  return metrics;\n}\n\n/** Calculate performance metrics for all subgroups */\nfunction calculateSubgroupMetrics(subgroups, nextId, groupFeatures, allFeatures, allValues) {\n  let metrics = [];\n\n  // Keep track of the ID for all active subgroups\n  let i = nextId;\n\n  subgroups.forEach((group, key) => {\n\n    let fm = calculateFairnessMetrics(group.insts)\n    let dist = calcValueDist(group.insts, allFeatures, allValues)\n\n    metrics.push({\n      id: i,\n      feats: groupFeatures,\n      vals: group.vals,\n      insts: group.insts,\n      metrics: fm, \n      type: \"top\",\n      distrib: dist\n    });\n    i++;\n  });\n\n  return metrics;\n}\n\n/** Calculate the base classification COUNTS for a group of instances */\nfunction calculateBaseRates(items) {\n\n  let p = 0;\n  let n = 0;\n  let tp = 0;\n  let tn = 0;\n  let fp = 0;\n  let fn = 0;\n\n  items.forEach(item => {\n    let predicted = Math.round(parseFloat(item[\"out\"]));\n    let actual = parseInt(item[\"class\"], 10);\n\n    if (predicted === 1 && actual === 1) {\n      tp++;\n      p++;\n    } else if (predicted === 0 && actual === 0) {\n      tn++;\n      n++;\n    } else if (predicted === 1 && actual === 0) {\n      fp++;\n      n++;\n    } else {\n      fn++;\n      p++;\n    }\n  });\n\n  return {\n    p: p,\n    n: n,\n    tp: tp,\n    tn: tn,\n    fp: fp,\n    fn: fn\n  };\n}\n\nfunction calcValueDist(insts, allFeatures, allValues) {\n  // init dist\n  let dist = {}\n  allFeatures.forEach((f, i) => { \n    let thisVals = allValues[i];\n    let v_dist = {}\n    thisVals.forEach((v, i) => {\n      v_dist[v] = 0;\n    });\n    dist[f] = v_dist;\n  });\n\n  // populate dist\n  insts.forEach((item, i) => {\n    Object.entries(item).forEach(tuple => {\n      // tuple = [\"age\", 17]\n      dist[tuple[0]][tuple[1]] += 1\n    })\n  })\n\n  // turn into array with values sorted\n  let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\n\n  let distrib_arr = []\n  allFeatures.forEach(feat_name => {\n    let r = Object.entries(dist[feat_name]);\n    r.sort((a,b) => (collator.compare(a[0], b[0])));\n    distrib_arr.push(r)\n  })\n\n  return distrib_arr;\n}","import { calculateFairnessMetrics } from \"../util/generateSubgroups\";\n// import skmeans from 'skmeans';\n\nfunction shannonEntropy(arr, size) {\n  let s = 0;\n  Object.keys(arr).forEach(k => {\n    arr[k] = arr[k] / size;\n    let v = arr[k]\n    if (v !== 0) {\n      s += v * Math.log2(v)\n    }\n  });\n  return -s;\n}\n\n// function runClustering(data, feats, vals) {\n//   // Run One-Hot encoding\n\n//   // Check which features are numeric (0) /categorical (1)\n//   let featTypes = []\n//   vals.forEach((valArr, i) => {\n//     if (isNaN(valArr[0])) {\n//       featTypes.push(1);\n//     } else {\n//       featTypes.push(0);\n//     }\n//   })\n\n//   // One-hot encode\n//   let data_oh = data.slice();\n//   data_oh.forEach(inst => {\n//     featTypes.forEach((type, i) => {\n//       if (type === 1) {\n//         vals[i].forEach(val => {\n//           inst[feats[i] + \"-\" + val] = 0;\n//           if (inst[feats[i]] === val) {\n//             inst[feats[i] + \"-\" + val] = 1;\n//           }\n//         })\n//         delete inst[feats[i]]\n//       } else {\n//         inst[feats[i]] = parseFloat(inst[feats[i]])\n//       }\n//     })\n//   })\n\n//   let arrs = data_oh.map(Object.values)\n\n//   //let clusts = skmeans(arrs.slice(100), 50);\n\n// }\n\n/**\n * Given an array of instances with a class, output label, and cluster, returns an array of clusters\n * with the defining feature, corresponding values, instances that belong to\n * the cluster, and performance metrics.\n */\nexport function getClusters(data, feats, vals) {\n  // Get all features, ignoring class, out, and cluster\n  let features = Object.keys(data[0]);\n  features.splice(features.indexOf(\"class\"), 1);\n  features.splice(features.indexOf(\"out\"), 1);\n  features.splice(features.indexOf(\"cluster\"), 1);\n\n  // Calculte all possible features values\n  let all_atts = {};\n  features.forEach(attr => {\n    let s = new Set(data.map(p => p[attr]));\n    all_atts[attr] = s;\n  });\n\n  // Group instances by cluster\n  let clustInstances = [];\n  //let clusters = runClustering(data, feats, vals);\n  data.forEach(inst => {\n    // Ignore cluster -1, since unclustered\n    if (inst.cluster !== -1) {\n      if (clustInstances[inst.cluster] == null) {\n        clustInstances[inst.cluster] = [inst];\n      } else {\n        clustInstances[inst.cluster] = [...clustInstances[inst.cluster], inst];\n      }\n    }\n  });\n\n  // Calculate value count per cluster\n  let clustDistributions = [];\n  clustInstances.forEach((cluster, i) => {\n    clustDistributions[i] = {};\n    let clustDistrib = clustDistributions[i];\n    clustDistrib[\"size\"] = cluster.length;\n    features.forEach(feat => {\n      clustDistrib[feat] = {};\n      let featDistrib = clustDistrib[feat];\n      cluster.forEach(inst => {\n        featDistrib[inst[feat]] = featDistrib[inst[feat]]\n          ? featDistrib[inst[feat]] + 1\n          : 1;\n      });\n    });\n  });\n\n  // Calculate entropy per cluster per feature, normalizing value counts to get distributions\n  let clustEntropies = [];\n  clustDistributions.forEach((_, i) => {\n    clustEntropies[i] = {};\n    let clustEntr = clustEntropies[i];\n    let clustDistrib = clustDistributions[i];\n    let size = clustDistrib[\"size\"];\n    features.forEach(feat => {\n      clustEntr[feat] = shannonEntropy(clustDistrib[feat], size);\n    });\n  });\n\n  // TODO: Let user set or see more than 3 features\n  // Get top K defining features and values for each cluster\n  let clustDefining = [];\n  clustEntropies.forEach((cluster, i) => {\n    let orderedFeats = Object.keys(cluster)\n      .sort((a, b) => {\n        return cluster[a] - cluster[b];\n      })\n\n    let clustDistrib = clustDistributions[i];\n    let orderedVals = orderedFeats.map(feat => {\n      let vals = clustDistrib[feat];\n      return Object.keys(vals).reduce((a, b) => (vals[a] < vals[b] ? a : b));\n    });\n    \n    clustDefining[i] = {\n      feats: orderedFeats,\n      clusterid: i,\n      vals: orderedVals,\n      insts: clustInstances[i],\n      metrics: calculateFairnessMetrics(clustInstances[i]),\n      distrib: clustDistributions[i],\n      type: \"bottom\"\n    };\n  });\n\n  return clustDefining;\n}\n","export const PRIMARY_COLOR = \"#1D2737\";\nexport const SECONDARY_COLOR = \"#5a6d94\";\nexport const TERTIARY_COLOR = \"#d6d6d6\";\nexport const HOVERED_COLOR = \"#2979ff\";\nexport const CLICKED_COLOR = \"#b71c1c\";\n\nexport const METRICS = [\n  { label: \"Accuracy\", value: \"acc\", key: \"acc\" },\n  { label: \"Precision\", value: \"prec\", key: \"prec\" },\n  { label: \"Recall\", value: \"rec\", key: \"rec\"},\n  { label: \"Specificity\", value: \"spec\", key: \"spec\" },\n  { label: \"Negative Predictive Value\", value: \"npv\", key:'npv' },\n  { label: \"False Negative Rate\", value: \"fnr\", key:\"fnr\" },\n  { label: \"False Positive Rate\", value: \"fpr\", key:\"fpr\" },\n  { label: \"False Discovery Rate\", value: \"fdr\", key:\"fdr\" },\n  { label: \"False Omission Rate\", value: \"for\", key:\"for\" },\n  { label: \"F1\", value: \"f1\", key: \"f1\" }\n];\n","// This WebWorker loads takes the loaded data and calcualtes fairnes metrics for it.\nexport default () => {\n  /**\n   * Calculate Common Fairness Metrics\n   *\n   * @param counts: counts of tp, tn, fp, tn, p, n\n   * Note:\n   * acc = accuracy\n   * rec = recall\n   * prec = precision\n   * spec = specificity\n   * npv = negative predictive value\n   * fnr = false negative rate or miss rate\n   * fpr = false positive rate\n   * fdr = false discovery rate\n   * for = false omission rate\n   * f1 = f1 score\n   */\n  function calculateFairnessMetrics(data) {\n    let m = calculateBaseRates(data);\n\n    let metrics = {\n      size: data.length,\n      p: (100 * m.p) / data.length,\n      n: (100 * m.n) / data.length,\n      acc: (100 * (m.tp + m.tn)) / (m.p + m.n),\n      rec: (100 * m.tp) / (m.tp + m.fn),\n      spec: (100 * m.tn) / (m.fp + m.tn),\n      prec: (100 * m.tp) / (m.tp + m.fp),\n      npv: (100 * m.tn) / (m.tn + m.fn),\n      fnr: (100 * m.fn) / (m.fn + m.tp),\n      fpr: (100 * m.fp) / (m.fp + m.tn),\n      fdr: (100 * m.fp) / (m.fp + m.tp),\n      for: (100 * m.fn) / (m.fn + m.tn),\n      f1: (100 * 2 * m.tp) / (2 * m.tp + m.fp + m.fn)\n    };\n\n    Object.keys(metrics).forEach(k => {\n      if (isNaN(metrics[k])) {\n        metrics[k] = 0;\n      }\n    });\n\n    return metrics;\n  }\n\n  /** Calculate the base classification COUNTS for a group of instances */\n  function calculateBaseRates(items) {\n    let p = 0;\n    let n = 0;\n    let tp = 0;\n    let tn = 0;\n    let fp = 0;\n    let fn = 0;\n\n    items.forEach(item => {\n      let predicted = Math.round(parseFloat(item[\"out\"]));\n      let actual = parseInt(item[\"class\"], 10);\n\n      if (predicted === 1 && actual === 1) {\n        tp++;\n        p++;\n      } else if (predicted === 0 && actual === 0) {\n        tn++;\n        n++;\n      } else if (predicted === 1 && actual === 0) {\n        fp++;\n        n++;\n      } else {\n        fn++;\n        p++;\n      }\n    });\n\n    return {\n      p: p,\n      n: n,\n      tp: tp,\n      tn: tn,\n      fp: fp,\n      fn: fn\n    };\n  }\n\n  /** Calculate distribution over instances */\n  function calcValueDist(insts, allFeatures, allValues) {\n    // init dist\n    let dist = {}\n    allFeatures.forEach((f, i) => { \n      let thisVals = allValues[i];\n      let v_dist = {}\n      thisVals.forEach((v, i) => {\n        v_dist[v] = 0;\n      });\n      dist[f] = v_dist;\n    });\n  \n    // populate dist\n    insts.forEach((item, i) => {\n      Object.entries(item).forEach(tuple => {\n        // tuple = [\"age\", 17]\n        dist[tuple[0]][tuple[1]] += 1\n      })\n    })\n\n    return dist;\n  }\n\n  self.addEventListener(\"message\", function(e) { // eslint-disable-line no-restricted-globals\n    let out = {};\n    let data = e.data;\n\n    out.data = data;\n    out.avgs = calculateFairnessMetrics(data);\n    out.feats = Object.keys(data[0]);\n\n    // calculate values\n    let vals = [];\n    for (let i = 0; i < out.feats.length; i++) {\n      let s = new Set(data.map(p => p[out.feats[i]]));\n      let s_arr = Array.from(s);\n      vals.push(s_arr);\n    }\n\n    out.vals = vals;\n\n    // calculate global feat distribution\n    let distrib = calcValueDist(data, out.feats, out.vals);\n    let distrib_arr = []\n\n    let collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\n\n    out.feats.forEach(feat_name => {\n      let r = Object.entries(distrib[feat_name]);\n      r.sort((a,b) => (collator.compare(a[0], b[0])));\n      distrib_arr.push(r)\n    })\n\n    out.distrib = distrib_arr;\n\n    postMessage(out);\n  });\n};\n","export default class WebWorker {\n    constructor(worker) {\n        const code = worker.toString();\n        const blob = new Blob(['('+code+')()']);\n        return new Worker(URL.createObjectURL(blob));\n    }\n}","import React, { Component } from \"react\";\nimport VegaLite from \"react-vega-lite\";\n\nconst spec = {\n  $schema: \"https://vega.github.io/schema/vega-lite/v3.json\",\n  mark: \"bar\",\n  width: 250,\n  transform: [\n    {\n      calculate: \"datum.val/100\",\n      as: \"percent\"\n    }\n  ],\n  encoding: {\n    y: {\n      field: \"name\",\n      type: \"ordinal\",\n      axis: { title: \"\", labelFontSize: 13, labelPadding: 10 }\n    },\n    x: {\n      field: \"percent\",\n      aggregate: \"sum\",\n      type: \"quantitative\",\n      axis: { title: \"Ground Truth Label Balance\", format: \"%\" }\n    },\n    color: {\n      field: \"color\",\n      type: \"nominal\",\n      scale: {\n        domain: [\"hovpos\", \"hovneg\", \"clickpos\", \"clickneg\"],\n        range: [\n          \"#64b5f6\",\n          \"rgba(100, 181, 246, .3)\",\n          \"#e57373\",\n          \"rgba(229, 115, 115, .3)\"\n        ]\n      },\n      legend: null\n    }\n  }\n};\n\nclass ClassDistribution extends Component {\n  render() {\n    let data = [];\n    if (this.props.clickedGroup !== undefined) {\n      data.push({\n        name: \"Pinned\",\n        type: \"Positive\",\n        val: this.props.clickedGroup.metrics.p,\n        color: \"clickpos\"\n      });\n      data.push({\n        name: \"Pinned\",\n        type: \"Negative\",\n        val: this.props.clickedGroup.metrics.n,\n        color: \"clickneg\"\n      });\n    }\n    if (this.props.hoveredGroup !== undefined) {\n      data.push({\n        name: \"Hovered\",\n        type: \"Positive\",\n        val: this.props.hoveredGroup.metrics.p,\n        color: \"hovpos\"\n      });\n      data.push({\n        name: \"Hovered\",\n        type: \"Negative\",\n        val: this.props.hoveredGroup.metrics.n,\n        color: \"hovneg\"\n      });\n    }\n\n    return <VegaLite data={{ values: data }} spec={spec} />;\n  }\n}\n\nexport default ClassDistribution;\n","import React, { Component } from \"react\";\nimport VegaLite from \"react-vega-lite\";\n\nconst spec = {\n  $schema: \"https://vega.github.io/schema/vega-lite/v3.json\",\n  width: 250,\n  height: 50,\n  mark: \"bar\",\n  transform: [\n    {\n      calculate: \"datum.value/100\",\n      as: \"percent\"\n    }\n  ],\n  spacing: 10,\n  encoding: {\n    row: {\n      field: \"metric\",\n      type: \"ordinal\",\n      scale: { padding: 4 },\n      axis: { title: \"\", orient: \"top\", axisWidth: 1, offset: -8 },\n      header: { titleFontSize: 20, labelFontSize: 12,  labelAngle: 0 }\n    },\n    y: {\n      field: \"group\",\n      type: \"ordinal\",\n      axis: { title: \"\", labels: false },\n    },\n    x: {\n      field: \"percent\",\n      type: \"quantitative\",\n      scale: {\n        domain: [0, 1]\n      },\n      axis: { title: \"\", format: \"%\" }\n    },\n    color: {\n      field: \"group\",\n      type: \"nominal\",\n      scale: {\n        domain: [\"hovered\", \"pinned\"],\n        // range: [HOVERED_COLOR, CLICKED_COLOR]\n        range: [\"#64b5f6\", \"#e57373\"]\n      },\n      legend: { title: \"\" }\n    }\n  }\n};\n\nclass MetricsDistribution extends Component {\n  render() {\n    let data = [];\n    if (this.props.hoveredGroup) {\n      data = data.concat(\n        this.props.selectedMetrics.map(m => {\n          return {\n            group: \"hovered\",\n            metric: m.label,\n            value: this.props.hoveredGroup.metrics[m.value],\n          };\n        })\n      );\n    }\n    if (this.props.clickedGroup) {\n      data = data.concat(\n        this.props.selectedMetrics.map(m => {\n          return {\n            group: \"pinned\",\n            metric: m.label,\n            value: this.props.clickedGroup.metrics[m.value]\n          };\n        })\n      );\n    }\n    return (\n      <VegaLite data={{ values: data }} spec={spec} />\n    );\n  }\n}\n\nexport default MetricsDistribution;\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport React, { Component } from \"react\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport ClassDistribution from \"./ClassDistribution\";\nimport \"../style/Radar.css\";\nimport MetricsDistribution from \"./MetricsDistribution\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { HOVERED_COLOR, CLICKED_COLOR} from \"../util/globals\";\n\nconst styles = {\n  card: {\n    width: \"25%\",\n    height: \"100%\",\n    marginTop: 70,\n    marginRight: 10,\n    overflow: \"scroll\"\n  },\n  featureStyle: {\n    textAlign: \"justify\"\n  },\n  avatar: {\n    backgroundColor: \"#1D2737\"\n  },\n  expand: {\n    margin: \"0px auto\"\n  },\n  metrics: {\n    marginTop: 10\n  },\n  feats: {\n    marginBottom: 10\n  },\n  hovered: {\n    color: HOVERED_COLOR\n  },\n  clicked: {\n    color: CLICKED_COLOR\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"inline\",\n    justifyContent: \"space-between\",\n    padding: 7,\n    marginBottom: 5\n  },\n  selectedGroups: {\n    marginTop: 8\n  }\n};\n\nclass ExpandedCard extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.hovered === this.props.hovered &&\n      nextProps.clicked === this.props.clicked\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  export = () => {\n    let clickedGroup = this.props.activeGroups[this.props.clicked];\n    if (clickedGroup) {\n      function saveText(text, filename) {\n        var a = document.createElement(\"a\");\n        a.setAttribute(\n          \"href\",\n          \"data:text/plain;charset=utf-u,\" + encodeURIComponent(text)\n        );\n        a.setAttribute(\"download\", filename);\n        a.click();\n      }\n      saveText(JSON.stringify(clickedGroup), \"clickedgroup.json\");\n    }\n  };\n\n  render() {\n    let classes = this.props.classes;\n\n    let clickedGroup = this.props.activeGroups[this.props.clicked];\n    let hoveredGroup = this.props.activeGroups[this.props.hovered];\n\n    let featsClick = [];\n    if (clickedGroup) {\n      featsClick = clickedGroup.feats;\n      if (clickedGroup.type === \"bottom\") {\n        featsClick = clickedGroup.feats.slice(0, 5);\n      }\n    }\n\n    let featsHov = [];\n    if (hoveredGroup) {\n      featsHov = hoveredGroup.feats;\n      if (hoveredGroup.type === \"bottom\") {\n        featsHov = hoveredGroup.feats.slice(0, 5);\n      }\n    }\n    let feats_comb = [...new Set(featsHov.concat(featsClick))];\n\n    let feats = feats_comb.map((feat, i) => {\n      let hoveredCell = <TableCell />;\n      let clickedCell = <TableCell />;\n      if (this.props.clicked !== -1 && clickedGroup.feats.includes(feat)) {\n        clickedCell = (\n          <TableCell align={\"right\"}>\n            {clickedGroup.vals[clickedGroup.feats.indexOf(feat)]}\n          </TableCell>\n        );\n      }\n      if (this.props.hovered !== -1 && hoveredGroup.feats.includes(feat)) {\n        hoveredCell = (\n          <TableCell align={\"right\"}>\n            {hoveredGroup.vals[hoveredGroup.feats.indexOf(feat)]}\n          </TableCell>\n        );\n      }\n\n      return (\n        <>\n          <TableRow key={i}>\n            <TableCell>{feat}</TableCell>\n            {clickedCell}\n            {hoveredCell}\n          </TableRow>\n        </>\n      );\n    });\n\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n          <div className={classes.header}>\n            <h4 className={classes.selectedGroups}>Group Details</h4>\n            <Button\n              className={classes.exportButton}\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.export}\n            >\n              Export\n            </Button>\n          </div>\n          <Divider />\n          <MetricsDistribution\n            hoveredGroup={hoveredGroup}\n            clickedGroup={clickedGroup}\n            selectedMetrics={this.props.selectedMetrics}\n          />\n          <ClassDistribution\n            hoveredGroup={hoveredGroup}\n            clickedGroup={clickedGroup}\n          />\n          <Paper className={classes.feats}>\n            <Table className={classes.table} padding=\"dense\">\n              <colgroup>\n                <col style={{ width: \"33%\" }} />\n                <col style={{ width: \"33%\" }} />\n                <col style={{ width: \"33%\" }} />\n              </colgroup>\n              <TableHead className={classes.tableHeader}>\n                <TableRow key={0}>\n                  <TableCell>Feature</TableCell>\n                  <TableCell align=\"right\">\n                    <span className={classes.clicked}>Pinned</span>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <span className={classes.hovered}>Hovered</span>\n                  </TableCell>\n                </TableRow>\n                <TableRow key={1}>\n                  <TableCell>Size</TableCell>\n                  <TableCell align=\"right\">\n                    {clickedGroup && clickedGroup.metrics.size}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {hoveredGroup && hoveredGroup.metrics.size}\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>{feats}</TableBody>\n            </Table>\n          </Paper>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(ExpandedCard);\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport d3tip from \"d3-tip\";\nimport \"../style/BoxPlot.css\";\nimport { TERTIARY_COLOR } from \"../util/globals\";\n\nconst boxWidth = 300;\nconst boxHeight = 100;\n\nclass BoxPlot extends Component {\n  constructor(props) {\n    super(props);\n\n    var margin = {\n        top: 50,\n        right: 10,\n        bottom: 0,\n        left: 10\n      },\n      width = boxWidth - margin.left - margin.right,\n      height = boxHeight - margin.top - margin.bottom;\n\n    this.state = {\n      margin,\n      width,\n      height\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.type === \"global\" &&\n      this.props.dataDistrib.length === 0 &&\n      nextProps.dataDistrib.length !== 0\n    ) {\n      return true;\n    } else if (\n      this.props.type === \"click\" &&\n      this.props.clicked !== nextProps.clicked\n    ) {\n      return true;\n    } else if (\n      this.props.type === \"hover\" &&\n      this.props.hovered !== nextProps.hovered\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update = () => {\n    if (this.props.type === \"global\") {\n      this.drawGlobalDistBar(\n        this.props.dataDistrib,\n        this.props.featName,\n        this.props.featIndex,\n        this.props.maxy\n      );\n    } else {\n      let groupIndex =\n        this.props.type === \"click\" ? this.props.clicked : this.props.hovered;\n\n      this.drawGroupDistBar(\n        this.props.activeGroups,\n        groupIndex,\n        this.props.type,\n        this.props.featName,\n        this.props.featIndex,\n        this.props.maxy\n      );\n    }\n  };\n\n  drawGlobalDistBar = (dataDistrib, feat, featIndex, maxy) => {\n    let arr = dataDistrib[featIndex];\n\n    this.drawBar(arr, featIndex, \"global\", maxy);\n  };\n\n  /**\n   * @param clickedGroupDist dist for this feature\n   * @param type: \"hover\" or \"click\"\n   */\n  drawGroupDistBar = (\n    activeGroups,\n    groupIndex,\n    type,\n    feat,\n    featIndex,\n    maxy\n  ) => {\n    // delete existing plots of this type\n    d3.select(\"#box-plot-bar-\" + type + \"-\" + featIndex).remove();\n\n    if (groupIndex >= 0) {\n      let group = activeGroups[groupIndex];\n\n      // TODO temp: need to change format of bottom up subgroups\n      if (group.type === \"top\") {\n        let feat_dist_arr = group.distrib[featIndex];\n        this.drawBar(feat_dist_arr, featIndex, \"bar-\" + type, maxy);\n      }\n    }\n  };\n\n  /**\n   * Draw the actual bars yah\n   * @param data_arr: [value, count]\n   * @param featIndex\n   * @param bar_type: \"\", \"bar-click\", or \"bar-hover\"\n   */\n  drawBar = (data_arr, featIndex, bar_type, maxy) => {\n    const node = this.node;\n\n    let svg = d3\n      .select(node)\n      .append(\"svg\")\n      .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      .attr(\"viewBox\", \"0 0 300 100\")\n      .attr(\"class\", \"box-plot\")\n      .attr(\"id\", \"box-plot-\" + bar_type + \"-\" + featIndex)\n      .append(\"g\")\n      .attr(\n        \"transform\",\n        \"translate(\" +\n          this.state.margin.left +\n          \",\" +\n          this.state.margin.top +\n          \")\"\n      );\n\n    // categorical X\n    let x = d3\n      .scaleBand()\n      .rangeRound([0, 300], 0.1)\n      .domain(\n        data_arr.map(d => {\n          return d[0];\n        })\n      );\n\n    let y = d3\n      .scaleLinear()\n      .range([this.state.height, 0])\n      .domain([0, maxy]);\n\n    let hght = this.state.height;\n\n    var tip = d3tip()\n      .attr(\"class\", \"d3-tip\")\n      .offset([-10, 0])\n      .html(function(d) {\n        return (\n          d[0] +\n          \": <span style='color:\" +\n          TERTIARY_COLOR +\n          \"'>\" +\n          d[1] +\n          \"</span>\"\n        );\n      });\n\n    svg.call(tip);\n\n    svg\n      .selectAll(\"rect\")\n      .data(data_arr)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", d => {\n        return x(d[0]);\n      })\n      .attr(\"y\", d => {\n        return y(d[1]);\n      })\n      .attr(\"width\", function(d) {\n        return x.bandwidth();\n      })\n      .attr(\"height\", function(d) {\n        return hght - y(d[1]);\n      })\n      .attr(\"id\", function(d, i) {\n        return \"rect-\" + featIndex + \"-\" + i;\n      })\n      .attr(\"class\", \"barchart-rect \" + bar_type)\n      .on(\"mouseover\", tip.show)\n      .on(\"mouseout\", tip.hide);\n  };\n\n  render() {\n    return <div ref={node => (this.node = node)} />;\n  }\n}\n\nexport default BoxPlot;\n","import Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport * as d3 from \"d3\";\nimport React, { Component } from \"react\";\nimport BoxPlot from \"./BoxPlot\";\nimport { PRIMARY_COLOR, SECONDARY_COLOR, TERTIARY_COLOR } from \"../util/globals\";\n\nconst styles = {\n  drawer: {\n    width: \"20%\",\n    flexShrink: 0,\n    marginTop: 65,\n    maxWidth: 360\n  },\n  feature: {\n    margin: 10\n  },\n  button: {\n    margin: \"0px auto\"\n  },\n  listItem: {\n    paddingBottom: \"20px\",\n    height: 100,\n    alignItems: \"baseline\"\n  },\n  listText: {\n    height: 25\n  },\n  radio: {\n    top: \"25%\"\n  },\n  divider: {\n    marginTop: 5\n  },\n  boxLabel: {\n    textTransform: \"capitalize\",\n    fontSize: \"16px\",\n    color: PRIMARY_COLOR,\n    fontWeight: 500,\n    margin: 0\n  }\n};\n\nclass FeatureDrawer extends Component {\n  constructor(props) {\n    super(props);\n\n    let sub = {};\n    let max_ys = []\n\n    props.features.forEach((feat_name, feat_i) => {\n      sub[feat_i] = new Set();\n      let maxy = d3.max(props.dataDistrib[feat_i], d => {return d[1]})\n      max_ys.push(maxy)\n    });\n\n    this.state = {\n      checked: new Set(),\n      opened: new Set(),\n      subchecked: sub,\n      features: props.features,\n      max_ys: max_ys\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if ( (this.props.features.length === 0 && nextProps.features.length > 0) ||\n      (this.props.clicked !== nextProps.clicked) ||\n      (this.props.hovered !== nextProps.hovered) ||\n      this.compareState(this.state, nextState)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Determine if state has changed...only comparing size of sets for increased speed.\n   */\n  compareState = (oldState, newState) => {\n    if (\n      oldState.opened.size !== newState.opened.size ||\n      oldState.checked.size !== newState.checked.size\n    ) {\n      return true;\n    }\n\n    let out = false;\n    Object.keys(oldState.subchecked).forEach(k => {\n      if (newState.subchecked[k].size !== oldState.subchecked[k].size) {\n        out = true;\n      }\n    });\n\n    return out;\n  };\n\n  handleToggle = value => () => {\n    const { checked } = this.state;\n\n    let newChecked = new Set(checked);\n\n    if (newChecked.has(value)) {\n      newChecked.delete(value);\n    } else {\n      newChecked.add(value);\n    }\n\n    this.setState({\n      checked: newChecked\n    });\n  };\n\n  handleSubToggle = (feat_i, item_i) => () => {\n    const { subchecked, checked } = this.state;\n\n    let subnew = {};\n    Object.keys(subchecked).forEach(k => {\n      subnew[k] = new Set(subchecked[k]);\n    });\n\n    let n = new Set(checked);\n\n    if (subnew[feat_i].has(item_i)) {\n      subnew[feat_i].delete(item_i);\n    } else {\n      subnew[feat_i].add(item_i);\n    }\n\n    n.delete(feat_i);\n\n    this.setState({\n      subchecked: subnew,\n      checked: n\n    });\n  };\n\n  handleClick = feat_i => () => {\n    const { opened } = this.state;\n\n    let newOpened = new Set(opened);\n\n    if (newOpened.has(feat_i)) {\n      newOpened.delete(feat_i);\n    } else {\n      newOpened.add(feat_i);\n    }\n    this.setState({\n      opened: newOpened\n    });\n  };\n\n  handleHover = (i, j) => {\n    let selector = \"#rect-\" + i + \"-\" + j;\n\n    d3.select(selector)\n      .style(\"fill\", SECONDARY_COLOR)\n      .style(\"opacity\", 1);\n  };\n\n  handleUnhover = (i, j) => {\n    let selector = \"#rect-\" + i + \"-\" + j;\n\n    d3.select(selector)\n      .style(\"fill\", TERTIARY_COLOR)\n      .style(\"opacity\", 0.8);\n  };\n\n  handleClickSubgroup = () => {\n    let groups = {};\n    let sub = {};\n\n    this.props.features.forEach((feat_name, feat_i) => {\n      // get value\n      if (\n        this.state.checked.has(feat_i) ||\n        this.state.subchecked[feat_i].size > 0\n      ) {\n        let val_arr = [];\n\n        this.state.subchecked[feat_i].forEach(valIndex => {\n          val_arr.push(this.props.values[feat_i][valIndex]);\n        });\n\n        groups[feat_name] = val_arr;\n      }\n\n      // reset selection\n      sub[feat_i] = new Set();\n    });\n\n    this.props.createSubgroups(groups);\n\n    this.setState({ checked: new Set(), subchecked: sub });\n  };\n\n  render() {\n    const classes = this.props.classes;\n    const collator = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\n\n    if (this.props.features.length > 0) {\n      return (\n        <Drawer\n          className={classes.drawer}\n          classes={{ paper: classes.drawer }}\n          variant=\"permanent\"\n          anchor=\"left\"\n        >\n          <List>\n            <ListItem key={-1}>\n              <Tooltip\n                title=\"Create all subgroups of the selected features\"\n                placement=\"bottom\"\n              >\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  className={classes.button}\n                  onClick={this.handleClickSubgroup}\n                >\n                  Generate Subgroups\n                </Button>\n              </Tooltip>\n            </ListItem>\n            <Divider />\n\n            {this.props.features.map((feat_name, feat_i) => (\n              <>\n                <ListItem\n                  key={`section-${feat_i}`}\n                  className={classes.listItem}\n                  onClick={this.handleClick(feat_i)}\n                >\n                  <p className={classes.boxLabel}>{feat_name}</p>\n                  {/* Global BoxPlot */}\n                  <BoxPlot\n                    featName={feat_name}\n                    dataDistrib={this.props.dataDistrib}\n                    featIndex={feat_i}\n                    type={\"global\"}\n                    maxy= {this.state.max_ys[feat_i]}\n                  />\n                  {/* Clicked BoxPlot */}\n                  {/* <BoxPlot\n                    featName={feat_name}\n                    featIndex={feat_i}\n                    clicked={this.props.clicked}\n                    hovered={this.props.hovered}\n                    activeGroups={this.props.activeGroups}\n                    type={\"click\"}\n                    maxy= {this.state.max_ys[feat_i]}\n                  /> */}\n                  {/* Hovered BoxPlot */}\n                  <BoxPlot\n                    featName={feat_name}\n                    featIndex={feat_i}\n                    clicked={this.props.clicked}\n                    hovered={this.props.hovered}\n                    activeGroups={this.props.activeGroups}\n                    type={\"hover\"}\n                    maxy= {this.state.max_ys[feat_i]}\n                  />\n\n                  <ListItemSecondaryAction className={classes.radio}>\n                    <Checkbox\n                      onChange={this.handleToggle(feat_i)}\n                      checked={this.state.checked.has(feat_i)}\n                      disabled={this.state.subchecked[feat_i].size > 0}\n                    />\n                  </ListItemSecondaryAction>\n                </ListItem>\n\n                <Collapse\n                  in={this.state.opened.has(feat_i)}\n                  timeout=\"auto\"\n                  unmountOnExit\n                >\n                  {this.props.values[feat_i].sort(collator.compare).map((value, value_i) => (\n                    <ListItem\n                      key={`item-${feat_i}-${value_i}`}\n                      button\n                      onMouseOver={e => this.handleHover(feat_i, value_i, e)}\n                      onMouseOut={e => this.handleUnhover(feat_i, value_i, e)}\n                    >\n                      <ListItemText primary={value} />\n\n                      <ListItemSecondaryAction>\n                        <Checkbox\n                          onChange={this.handleSubToggle(feat_i, value_i)}\n                          checked={this.state.subchecked[feat_i].has(value_i)}\n                        />\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </Collapse>\n                <Divider className={classes.divider} />\n              </>\n            ))}\n          </List>\n        </Drawer>\n      );\n    }\n\n    return <div className={classes.drawer}>Loading...</div>;\n  }\n}\n\nexport default withStyles(styles)(FeatureDrawer);\n","import React, { Component } from \"react\";\nimport VegaLite from \"react-vega-lite\";\nimport { PRIMARY_COLOR } from \"../util/globals\";\n\nconst spec = {\n  $schema: \"https://vega.github.io/schema/vega-lite/v3.json\",\n  height: 50,\n  width: 75,\n  data: {\n    name: \"myData\"\n  },\n  transform: [\n    {\n      calculate: \"datum.makeup/100\",\n      as: \"percent\"\n    }\n  ],\n  mark: \"bar\",\n  encoding: {\n    y: {\n      field: \"value\",\n      type: \"ordinal\",\n      axis: { title: \"\" },\n      sort: { encoding: \"x\", order: \"descending\" }\n    },\n    x: {\n      field: \"percent\",\n      type: \"quantitative\",\n      axis: { title: \"\", format: \"%\" }\n    },\n    color: {\n      field: \"primary\",\n      type: \"nominal\",\n      scale: {\n        domain: [0, 1],\n        range: [PRIMARY_COLOR, \"#718C73\"]\n      },\n      legend: null\n    }\n  }\n};\n\nclass ClusterDistribution extends Component {\n  render() {\n    let cluster = this.props.cluster;\n    let feature = this.props.feature;\n\n    let distrib = cluster.distrib[feature];\n    let data = this.props.values[this.props.features.indexOf(feature)].map(\n      (val, i) => {\n        if (distrib[val]) {\n          return {\n            value: val,\n            makeup: distrib[val] * 100,\n            primary: val === this.props.maxVal ? 1 : 0\n          };\n        } else {\n          return {\n            value: val,\n            makeup: 0,\n            primary: 0\n          };\n        }\n      }\n    );\n\n    return (\n      <VegaLite\n        data={{ values: data }}\n        spec={spec}\n        style={{ paddingLeft: 0 }}\n      />\n    );\n  }\n}\n\nexport default ClusterDistribution;\n","// function calcDistBetweenClusters(A, B, distributions) {\n//   let total_dist = 0;\n\n//   Object.keys(distributions[A]).forEach(feat => {\n//     let A_dist = Object.entries(distributions[A][feat])\n//       .sort((a, b) => {\n//         return a[0] - b[0];\n//       })\n//       .map(a => a[1]);\n//     let B_dist = Object.entries(distributions[B][feat])\n//       .sort((a, b) => {\n//         return a[0] - b[0];\n//       })\n//       .map(a => a[1]);\n//     total_dist += JSD(A_dist, B_dist);\n//   });\n\n//   return total_dist;\n// }\n\n// function JSD(P, Q) {\n//   let PNorm = Math.norm(P, 1);\n//   let QNorm = Math.norm(Q, 1);\n\n//   let P_new = P.map(e => e / PNorm);\n//   let Q_new = Q.map(e => e / QNorm);\n\n//   let M = P_new.map((e, i) => 0.5 * (e + Q_new[i]));\n\n//   return 0.5 * (Math.kldivergence(P_new, M) + Math.kldivergence(Q_new, M));\n// }\n\n// function KLD(P, Q, qSize) {\n//   let div = 0;\n//   P.forEach((p, i) => {\n//     if (p !== 0) {\n//       div += p * Math.log2((Q[i] / qSize) / p);\n//     }\n//   });\n//   return div;\n// }\n\n// Gets all neighbors in activeGroups that only have one feature difference.\nexport function getNeighbors(subgroup, activeGroups) {\n  let oneAwayGroups = [];\n  activeGroups.forEach(group => {\n    let same = group.feats.length;\n    let diffFeatInd = -1;\n    subgroup.feats.forEach((feat, ind) => {\n      let i = group.feats.indexOf(feat)\n      if (i >= 0) {\n        if (group.vals[i] === subgroup.vals[ind]) {\n          same--;\n        } else {\n          diffFeatInd = ind;\n        }\n      }\n    });\n    if (same === 1) {\n      group[\"featDiff\"] = diffFeatInd;\n      oneAwayGroups.push(group);\n    }\n  })\n  return oneAwayGroups;\n}","import { withStyles } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ClusterDistribution from \"./ClusterDistribution\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport {\n  CLICKED_COLOR,\n  METRICS\n} from \"../util/globals\";\nimport { getNeighbors } from \"../util/neighboringClusters\";\nimport { TableHead } from \"@material-ui/core\";\nimport \"../style/GroupSuggestions.css\";\n\nconst styles = {\n  paper: {\n    height: 350,\n    overflow: \"scroll\",\n    marginLeft: 20,\n    marginRight: 20,\n    marginTop: 30\n  },\n  metrics: {\n    display: \"flex\",\n    flexDirection: \"inline\",\n    justifyContent: \"space-between\",\n    padding: 7\n  },\n  header: {\n    display: \"flex\",\n    flexDirection: \"inline\",\n    justifyContent: \"space-between\",\n    padding: 7\n  },\n  cards: {\n    display: \"flex\",\n    flexDirection: \"inline\",\n    justifyItems: \"center\"\n  },\n  cardContent: {\n    padding: 0\n  },\n  divider: {\n    marginTop: 10,\n    marginBottom: 10\n  },\n  headerDivider: {\n    marginBottom: 7\n  },\n  table: {\n    width: \"100%\"\n  },\n  fab: {\n    float: \"right\"\n  },\n  paging: {\n    float: \"right\",\n    display: \"inline-flex\",\n    marginTop: 7,\n    justifyContent: \"center\"\n  },\n  label: {\n    textTransform: \"capitalize\"\n  },\n  value: {\n    color: \"#718C73\"\n  },\n  similarGroups: {\n    display: \"inline-flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  },\n  settings: {\n    display: \"inline-flex\"\n  },\n  sortText: {\n    marginRight: 13,\n    marginTop: 7\n  },\n  diffTable: {\n    marginTop: 10\n  },\n  leftCell: {\n    paddingLeft: \"10px\",\n    maxWidth: 50\n  }\n};\n\nclass GroupSuggestions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 0,\n      showSimilar: false,\n      neighbors: [],\n      sort: \"acc\"\n    };\n  }\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.clicked !== this.props.clicked) {\n    }\n    if (nextProps.clustersLoaded) {\n      return true;\n    }\n    return false;\n  }\n\n  mouseEnter = cluster => {\n    this.props.suggestedHover(cluster);\n  };\n\n  mouseLeave = cluster => {\n    this.props.suggestedUnhover(cluster);\n  };\n\n  mouseClick = cluster => {\n    this.props.suggestedClick(cluster);\n  };\n\n  pageRight = () => {\n    if (this.state.page * 3 + 4 < this.props.clusters.length) {\n      this.setState({\n        page: this.state.page + 1\n      });\n    }\n  };\n\n  pageLeft = () => {\n    if (this.state.page !== 0) {\n      this.setState({\n        page: this.state.page - 1\n      });\n    }\n  };\n\n  changeView = val => {\n    if (val.target.value === 0) {\n      this.setState({\n        showSimilar: false\n      });\n    } else {\n      if (this.props.clicked !== -1) {\n        this.setState({\n          neighbors: getNeighbors(\n            this.props.activeGroups[this.props.clicked],\n            this.props.activeGroups.slice()\n          ),\n          showSimilar: true\n        });\n      } else {\n        this.setState({\n          showSimilar: true\n        });\n      }\n    }\n  };\n\n  changeSort = val => {\n    this.setState({\n      sort: val.target.value\n    });\n  };\n\n  render() {\n    let classes = this.props.classes;\n\n    if (this.state.showSimilar && this.state.neighbors.length !== 0) {\n      let clickedGroup = this.props.activeGroups[this.props.clicked];\n      let similarGroups = this.state.neighbors\n        .sort((a, b) => {\n          return a.metrics[this.state.sort] - b.metrics[this.state.sort];\n        })\n        .map((neigh, index) => {\n          return (\n            <Card\n              className={\"similar-card\"}\n              key={index}\n              onMouseEnter={_ => this.mouseEnter(neigh)}\n              onMouseLeave={_ => this.mouseLeave(neigh)}\n              onClick={_ => this.mouseClick(neigh)}\n            >\n              <CardContent className={classes.cardContent}>\n                <Table className={classes.table} padding=\"dense\">\n                  <TableBody>\n                    <TableRow>\n                      <TableCell>\n                        <b> Group {this.state.page * 3 + index + 1} </b>\n                        <br />\n                        {neigh.type === \"top\" ? \"Generated\" : \"Suggested\"}\n                      </TableCell>\n                      <TableCell />\n                      <TableCell align=\"right\">\n                        {neigh.metrics.size} Instances\n                      </TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n                <Table className={classes.diffTable} padding=\"dense\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Feature Difference</TableCell>\n                      <TableCell style={{ color: CLICKED_COLOR }} align=\"right\">Pinned</TableCell>\n                      <TableCell style={{ color: \"#718C73\" }} align=\"right\">Similar</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    <TableCell>\n                      {clickedGroup.feats[neigh.featDiff]}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {clickedGroup.vals[neigh.featDiff]}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {\n                        neigh.vals[\n                          neigh.feats.indexOf(\n                            clickedGroup.feats[neigh.featDiff]\n                          )\n                        ]\n                      }\n                    </TableCell>\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          );\n        });\n\n      return (\n        <Paper className={classes.paper}>\n          <div className={classes.header}>\n            <FormControl>\n              <Select value={1} onChange={this.changeView}>\n                <MenuItem value={0}>Suggested Subgroups</MenuItem>\n                <MenuItem value={1}>Similar Subgroups</MenuItem>\n              </Select>\n            </FormControl>\n            <div className={classes.settings}>\n              <Typography variant=\"body1\" className={classes.sortText}>\n                Sort by:\n              </Typography>\n              <FormControl>\n                <Select value={this.state.sort} onChange={this.changeSort}>\n                  {METRICS.map(m => (\n                    <MenuItem value={m.value}>{m.label}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n          </div>\n          <Divider className={classes.headerDivider} />\n          <div className={classes.similarGroups}>{similarGroups}</div>\n        </Paper>\n      );\n    } else {\n      // Get least performing subgroups.\n      let bottomClusters = this.props.clusters\n        .filter(clust => clust.metrics.size > this.props.minSize)\n        .sort((a, b) => {\n          return a.metrics[this.state.sort] - b.metrics[this.state.sort];\n        })\n        .slice(this.state.page * 3, this.state.page * 3 + 3);\n\n      let cards = bottomClusters.map((clust, index) => (\n        <Card\n          className={ \"suggested-card\"}\n          key={index}\n          onMouseEnter={_ => this.mouseEnter(clust)}\n          onMouseLeave={_ => this.mouseLeave(clust)}\n          onClick={_ => this.mouseClick(clust)}\n        >\n          <CardContent className={classes.cardContent}>\n            <Table className={classes.table} padding=\"none\">\n              <TableBody>\n                <TableRow>\n                  <TableCell padding=\"none\" className={classes.leftCell}>\n                    <b>Group {this.state.page * 3 + index + 1}</b>\n                  </TableCell>\n                  <TableCell width={80} padding=\"dense\" align=\"right\">\n                    {clust.metrics.size} Instances\n                  </TableCell>\n                </TableRow>\n                {clust.feats.map((feat, i) => (\n                  <TableRow key={i}>\n                    <TableCell padding=\"none\" className={classes.leftCell}>\n                      <b className={classes.label}>{feat}</b>\n                      <br />\n                      <span className={classes.value}>{clust.vals[i]}</span>\n                    </TableCell>\n                    <TableCell padding=\"none\" className={classes.cell} align=\"right\">\n                      <ClusterDistribution maxVal={clust.vals[i]} features={this.props.features} values={this.props.values} cluster={clust} feature={feat} />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      ));\n\n      return (\n        <Paper className={classes.paper}>\n          <div className={classes.header}>\n            <FormControl>\n              <Select value={0} onChange={this.changeView}>\n                <MenuItem value={0}>Suggested Subgroups</MenuItem>\n                <MenuItem value={1}>Similar Subgroups</MenuItem>\n              </Select>\n            </FormControl>\n            <div className={classes.settings}>\n              <Typography variant=\"body1\" className={classes.sortText}>\n                Sort by:\n              </Typography>\n              <FormControl>\n                <Select value={this.state.sort} onChange={this.changeSort}>\n                  {METRICS.map(m => (\n                    <MenuItem value={m.value}>{m.label}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              <div className={classes.paging}>\n                <ChevronLeft onClick={this.pageLeft} />\n                <Typography variant=\"body1\">\n                  {this.state.page * 3 + 1} -{\" \"}\n                  {this.state.page * 3 + 3 > this.props.clusters.length\n                    ? this.props.clusters.length\n                    : this.state.page * 3 + 3}\n                </Typography>\n                <ChevronRight onClick={this.pageRight} />\n              </div>\n            </div>\n          </div>\n          <Divider className={classes.headerDivider} />\n          <div className={classes.cards}>{cards}</div>\n        </Paper>\n      );\n    }\n  }\n}\n\nexport default withStyles(styles)(GroupSuggestions);\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\nimport Select from \"react-select\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Chip from \"@material-ui/core/Chip\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { emphasize } from \"@material-ui/core/styles/colorManipulator\";\n\nconst styles = theme => ({\n  selectorWrapper: {\n    minWidth: 250,\n    color: \"white\",\n    marginRight: 20,\n    marginTop: 10,\n  },\n  input: {\n    display: \"flex\",\n    padding: 0\n  },\n  valueContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flex: 1,\n    alignItems: \"center\",\n    overflow: \"hidden\"\n  },\n  chip: {\n    margin: `${theme.spacing.unit / 2}px ${theme.spacing.unit / 4}px`\n  },\n  chipFocused: {\n    backgroundColor: emphasize(\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[300]\n        : theme.palette.grey[700],\n      0.08\n    )\n  },\n  noOptionsMessage: {\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`\n  },\n  placeholder: {\n    position: \"absolute\",\n    left: 2,\n    fontSize: 16\n  },\n  paper: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0\n  },\n  divider: {\n    height: theme.spacing.unit * 2\n  }\n});\n\nfunction NoOptionsMessage(props) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.noOptionsMessage}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nfunction inputComponent({ inputRef, ...props }) {\n  return <div ref={inputRef} {...props} />;\n}\n\nfunction Control(props) {\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputComponent,\n        inputProps: {\n          className: props.selectProps.classes.input,\n          inputRef: props.innerRef,\n          children: props.children,\n          ...props.innerProps\n        }\n      }}\n      {...props.selectProps.textFieldProps}\n    />\n  );\n}\n\nfunction Option(props) {\n  return (\n    <MenuItem\n      buttonRef={props.innerRef}\n      selected={props.isFocused}\n      component=\"div\"\n      style={{\n        fontWeight: props.isSelected ? 500 : 400\n      }}\n      {...props.innerProps}\n    >\n      {props.children}\n    </MenuItem>\n  );\n}\n\nfunction Placeholder(props) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.placeholder}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nfunction ValueContainer(props) {\n  return (\n    <div className={props.selectProps.classes.valueContainer}>\n      {props.children}\n    </div>\n  );\n}\n\nfunction MultiValue(props) {\n  return (\n    <Chip\n      tabIndex={-1}\n      label={props.children}\n      className={classNames(props.selectProps.classes.chip, {\n        [props.selectProps.classes.chipFocused]: props.isFocused\n      })}\n      onDelete={props.removeProps.onClick}\n      deleteIcon={<CancelIcon {...props.removeProps} />}\n    />\n  );\n}\n\nfunction Menu(props) {\n  return (\n    <Paper\n      square\n      className={props.selectProps.classes.paper}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Paper>\n  );\n}\n\nconst components = {\n  Control,\n  Menu,\n  MultiValue,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  ValueContainer\n};\n\nclass MetricSelector extends Component {\n  handleChange = (values) => {\n    this.props.onMetricChange(values)\n  }\n\n  render() {\n    // these have to be defined out here or it breaks...idk man \n    var selectedOptions = this.props.selectedMetrics;\n    var suggs = this.props.suggestions;\n\n    return (\n      <div className={this.props.classes.selectorWrapper}>\n        <Select\n          classes={this.props.classes}\n          options={suggs}\n          components={components}\n          onChange={this.handleChange}\n          value={selectedOptions}\n          placeholder=\"Select Fairness Metrics\"\n          isMulti\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(MetricSelector);\n","import { withStyles } from \"@material-ui/core/styles\";\nimport * as d3 from \"d3\";\nimport React, { Component } from \"react\";\nimport \"../style/StripPlot.css\";\n\nconst styles = {\n  plot: {\n    display: \"inline-block\",\n    minWidth: 500,\n    width: \"100%\"\n  }\n};\n\nclass StripPlot extends Component {\n  constructor(props) {\n    super(props);\n\n    let margin = {\n      top: 0,\n      right: 50,\n      bottom: 0,\n      left: 50\n    };\n    let width = 1000;\n    let height = 80;\n\n    let xScale = d3\n      .scaleLinear()\n      .range([0, width - margin.right - margin.left])\n      .domain([0, 100]);\n    let yScale = d3\n      .scaleLinear()\n      .range([height - margin.top - margin.bottom, 0])\n      .domain([0, 100]);\n\n    let xAxis = d3\n      .axisBottom()\n      .scale(xScale)\n      .tickPadding(8)\n      .ticks(8)\n      .tickFormat(function(d) {\n        return d * 1 + \"%\";\n      });\n\n    this.state = {\n      margin: margin,\n      width: width - margin.left - margin.right,\n      height: height - margin.top - margin.bottom,\n      xScale: xScale,\n      yScale: yScale,\n      xAxis: xAxis\n    };\n  }\n\n  componentDidMount() {\n    this.createStripPlot();\n  }\n\n  createStripPlot = () => {\n    const node = this.node;\n\n    d3.select(node)\n      .selectAll(\"svg\")\n      .remove();\n\n    this.props.selectedMetrics.forEach(m => {\n      let svg = d3\n        .select(node)\n        .append(\"svg\")\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", \"0 0 1000 105\")\n        .attr(\"id\", \"stripplot-\" + m.value)\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" +\n            this.state.margin.left +\n            \",\" +\n            this.state.margin.top +\n            \")\"\n        );\n\n      svg\n        .append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + this.state.height + \")\")\n        .call(this.state.xAxis)\n        .append(\"text\")\n        .text(m.label)\n        .attr(\"class\", \"axis-label\")\n        .attr(\"x\", -10)\n        .attr(\"y\", -10);\n    });\n\n    this.update();\n  };\n\n  update = () => {\n    this.props.selectedMetrics.forEach(m => {\n      let svg = d3.select(this.node).select(\"#stripplot-\" + m.value);\n\n      svg.selectAll(\".percentline\").remove();\n\n      svg\n        .selectAll(\".percentline\")\n        .data(this.props.activeGroups, d => d.id)\n        .enter()\n        .append(\"line\")\n        .filter(d => {\n          return d.metrics.size > this.props.minSize;\n        })\n        .attr(\"x1\", d => {\n          return this.state.xScale(d.metrics[m.value]) + 50;\n        })\n        .attr(\"x2\", d => {\n          return this.state.xScale(d.metrics[m.value]) + 50;\n        })\n        .attr(\"y1\", 30)\n        .attr(\"y2\", 80)\n        .attr(\"class\", \"percentline\")\n        .attr(\"id\", d => {\n          return \"linecluster\" + d.id;\n        })\n        .on(\"mouseover\", d => {\n          this.props.barHover(d.id);\n        })\n        .on(\"mouseout\", d => {\n          this.props.barHover(-1);\n        })\n        .on(\"click\", d => {\n          this.props.barClick(d.id);\n        });\n\n      delete this.props.avgs.size;\n\n      let avgG = svg\n        .selectAll(\"line.avg\")\n        .data(this.props.avgs)\n        .enter()\n        .append(\"g\");\n\n      avgG\n        .append(\"line\")\n        .attr(\"x1\", d => {\n          return this.state.xScale(d[m.value]) + 50;\n        })\n        .attr(\"x2\", d => {\n          return this.state.xScale(d[m.value]) + 50;\n        })\n        .attr(\"y1\", 20)\n        .attr(\"y2\", 90)\n        .style(\"stroke\", \"#5a6d94\")\n        .style(\"stroke-width\", 2)\n        .style(\"opacity\", 0.4);\n\n      avgG\n        .append(\"text\")\n        .text(d => \"avg: \" + d[m.value].toFixed(2) + \"%\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"x\", d => {\n          return this.state.xScale(d[m.value]) + 50;\n        })\n        .attr(\"y\", 15)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"fill\", \"#5a6d94\");\n    });\n  };\n\n  shouldComponentUpdate(nextProps, _) {\n    if (nextProps.minSize !== this.props.minSize) {\n      return true;\n    }\n    if (\n      nextProps.selectedMetrics.length !== this.props.selectedMetrics.length\n    ) {\n      return true;\n    }\n    if (nextProps.activeGroups.length === this.props.activeGroups.length) {\n      return false;\n    }\n    return true;\n  }\n\n  componentDidUpdate(prevProps, _) {\n    if (\n      prevProps.selectedMetrics.length !== this.props.selectedMetrics.length\n    ) {\n      this.createStripPlot();\n    }\n  }\n\n  render() {\n    this.update();\n    return (\n      <div\n        className={this.props.classes.plot}\n        ref={node => (this.node = node)}\n      />\n    );\n  }\n}\n\nexport default withStyles(styles)(StripPlot);\n","import AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  createMuiTheme,\n  MuiThemeProvider,\n  withStyles\n} from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/lab/Slider\";\nimport * as d3 from \"d3\";\nimport React, { Component } from \"react\";\nimport data_output_and_clusters from \"../data/compas_high_class_cluster.csv\";\n// import data_output_and_clusters from \"../data/adult_out_with_clusters.csv\";\nimport \"../style/App.css\";\nimport { getClusters } from \"../util/clusterDescriptions\";\nimport { createSubgroups } from \"../util/generateSubgroups\";\nimport {\n  METRICS,\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n  TERTIARY_COLOR\n} from \"../util/globals\";\nimport worker from \"../workers/dataLoader.js\";\nimport WebWorker from \"../workers/WebWorker\";\nimport ExpandedCard from \"./ExpandedCard\";\nimport FeatureDrawer from \"./FeatureDrawer\";\nimport GroupSuggestions from \"./GroupSuggestions\";\nimport MetricSelector from \"./MetricSelector\";\nimport StripPlot from \"./StripPlot\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: PRIMARY_COLOR\n    },\n    secondary: {\n      main: SECONDARY_COLOR\n    }\n  },\n  overrides: {\n    MuiSlider: {\n      thumb: {\n        backgroundColor: \"#EBEBEB\"\n      },\n      track: {\n        backgroundColor: \"#EBEBEB\"\n      }\n    }\n  }\n});\n\nconst styles = {\n  appBar: {\n    zIndex: 1\n  },\n  body: {\n    display: \"flex\",\n    flexDirection: \"inline\"\n  },\n  content: {\n    width: \"55%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginTop: 65,\n    marginLeft: 10\n  },\n  plot: {\n    width: \"100%\"\n  },\n  slider: {\n    width: 150,\n    padding: 20,\n    marginRight: 30\n  },\n  reset: {\n    float: \"right\"\n  },\n  title: {\n    flexGrow: 1\n  },\n  subtitle: {\n    flexGrow: 1,\n    color: TERTIARY_COLOR,\n    textAlign: \"center\"\n  },\n  loadingScreen: {\n    minWidth: \"100%\",\n    minHeight: \"calc(100% + 22px)\",\n    marginTop: -22,\n    backgroundColor: PRIMARY_COLOR,\n    margin: \"0px auto\"\n  },\n  loadingText: {\n    paddingTop: 150,\n    color: \"white\",\n    textAlign: \"center\"\n  },\n  loadingProgress: {\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    color: \"white\"\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    /**\n     * Every subgroup in the activeGroups array should have the following form:\n     * {\n     *  feats: -> Array of features defining the group\n     *  vals: -> Array of values corresponding to the features (same indices)\n     *  insts: -> Array of all the instances belonging to the subgroup\n     *  metrics: -> Object containing all the base metrics (Acc, Prec, etc.)\n     *  type: -> The type of subgroup it is, either 'top' or 'bottom'\n     *  distrib: -> Value distribution for each feature\n     * }\n     */\n    this.state = {\n      // Array of instances with features, label, class output, and cluster\n      data: [],\n      // distribution counts of data in same order as features, sorted by value\n      dataDistrib: {},\n      // Array of clusters from DBSCAN with metrics and value distribution\n      clusters: [],\n      // Array of active groups with values and metrics\n      activeGroups: [],\n      // Object of metrics for the overall group\n      avgs: [],\n\n      // Features and values for all instances\n      features: [],\n      values: [],\n\n      // State of StripPlot\n      hovered: -1,\n      clicked: -1,\n\n      // State for selected metrics, by default accuracy, recall, and specificity\n      selectedMetrics: METRICS.slice(0, 3),\n\n      minSize: 0,\n\n      dataLoaded: false,\n      clustersLoaded: false\n    };\n\n    // WebWorker to run preprocessing in parallel.\n    let loaderWorker = new WebWorker(worker);\n\n    loaderWorker.addEventListener(\"message\", r => {\n      let out = r.data;\n      let clusters = getClusters(out.data, out.feats, out.vals);\n      this.setState({\n        data: out.data,\n        dataDistrib: out.distrib,\n        avgs: [out.avgs],\n        features: out.feats,\n        values: out.vals,\n        clusters: clusters,\n        dataLoaded: true,\n        clustersLoaded: true\n      });\n    });\n    d3.csv(data_output_and_clusters).then(d => loaderWorker.postMessage(d));\n  }\n\n  createSubgroups = groups => {\n    // TODO: Prevent adding duplicate subgroups\n    let subgroups = createSubgroups(\n      this.state.data,\n      groups,\n      this.state.activeGroups.length,\n      this.state.features,\n      this.state.values\n    );\n    this.setState({\n      activeGroups: this.state.activeGroups.concat(subgroups)\n    });\n  };\n\n  // Either -1 or the cluster that was hovered.\n  suggestedHover = clust => {\n    d3.selectAll(\".linehover\").classed(\"linehover\", false);\n\n    const foundArr = this.state.activeGroups.filter(\n      el => el.clusterid === clust.clusterid\n    );\n\n    if (foundArr.length === 0) {\n      clust.id = this.state.activeGroups.length;\n\n      this.setState(\n        {\n          activeGroups: this.state.activeGroups.concat(clust),\n          hovered: clust.id\n        },\n        () => {\n          d3.selectAll(\"#linecluster\" + clust.id).classed(\"linehover\", true);\n          d3.selectAll(\"#linecluster\" + this.state.clicked).classed(\n            \"lineclick\",\n            true\n          );\n        }\n      );\n    } else {\n      d3.selectAll(\"#linecluster\" + foundArr[0].id).classed(\"linehover\", true);\n      this.setState(\n        {\n          hovered: foundArr[0].id\n        },\n        () => {\n          d3.selectAll(\"#linecluster\" + this.state.clicked).classed(\n            \"lineclick\",\n            true\n          );\n        }\n      );\n    }\n  };\n\n  suggestedUnhover = clust => {\n    d3.selectAll(\".linehover\").classed(\"linehover\", false);\n\n    let newActives = this.state.activeGroups.filter(\n      e => e.id === this.state.clicked || e.clusterid !== clust.clusterid\n    );\n\n    this.setState(\n      {\n        activeGroups: newActives,\n        hovered: -1\n      },\n      () => {\n        d3.selectAll(\"#linecluster\" + this.state.clicked).classed(\n          \"lineclick\",\n          true\n        );\n      }\n    );\n  };\n\n  /**\n   * Have to set id to length -1 since groups gets added once on hover then again\n   * on click. If not it breaks when hovering later on\n   */\n  suggestedClick = clust => {\n    d3.selectAll(\".lineclick\").classed(\"lineclick\", false);\n\n    const foundArr = this.state.activeGroups.filter(\n      el => el.clusterid === clust.clusterid\n    );\n\n    if (foundArr.length === 0) {\n      clust.id = this.state.activeGroups.length;\n\n      this.setState(\n        {\n          activeGroups: this.state.activeGroups.concat(clust),\n          clicked: clust.id\n        },\n        () => {\n          d3.selectAll(\"#linecluster\" + clust.id).classed(\"lineclick\", true);\n        }\n      );\n    } else {\n      d3.selectAll(\"#linecluster\" + foundArr[0].id).classed(\"lineclick\", true);\n      this.setState({\n        clicked: foundArr[0].id\n      });\n    }\n  };\n\n  barHover = id => {\n    d3.selectAll(\".linehover\").classed(\"linehover\", false);\n\n    d3.selectAll(\"#linecluster\" + id).classed(\"linehover\", true);\n\n    this.setState({\n      hovered: id\n    });\n  };\n\n  barClick = id => {\n    d3.selectAll(\".lineclick\").classed(\"lineclick\", false);\n    d3.selectAll(\"#linecluster\" + id).classed(\"lineclick\", true);\n\n    this.setState({\n      clicked: id\n    });\n  };\n\n  changeMinSize = (_, val) => {\n    this.setState({\n      minSize: val\n    });\n  };\n\n  resetGroups = () => {\n    this.setState({\n      hovered: -1,\n      clicked: -1,\n      minSize: 0,\n      activeGroups: []\n    });\n  };\n\n  handleMetricsChange = m => {\n    this.setState({\n      selectedMetrics: m\n    });\n  };\n\n  render() {\n    let classes = this.props.classes;\n\n    if (!this.state.dataLoaded) {\n      return (\n        <div className={classes.loadingScreen}>\n          <Typography\n            variant=\"h2\"\n            color=\"inherit\"\n            className={classes.loadingText}\n          >\n            <strong>FairVis</strong>{\" \"}\n          </Typography>\n\n          <Typography variant=\"h6\" className={classes.subtitle}>\n            Audit Classification for Intersectional Bias\n          </Typography>\n\n          <h3 className={classes.loadingText}>Loading data</h3>\n          <CircularProgress\n            color=\"primary\"\n            className={classes.loadingProgress}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Typography\n              inline\n              variant=\"h4\"\n              color=\"inherit\"\n              className={classes.title}\n            >\n              <strong>FairVis</strong>{\" \"}\n              <Typography inline variant=\"h6\" className={classes.subtitle}>\n                {\" \"}\n                Audit Classification for Intersectional Bias{\" \"}\n              </Typography>\n            </Typography>\n            <Typography variant=\"body1\" color=\"inherit\">\n              Minimum Size: {this.state.minSize}\n            </Typography>\n            <Slider\n              className={classes.slider}\n              value={this.state.minSize}\n              onChange={this.changeMinSize}\n              step={1}\n              min={0}\n              max={\n                this.state.activeGroups.length === 0\n                  ? 0\n                  : d3.max(this.state.activeGroups, d => d.metrics.size)\n              }\n            />\n            <Button\n              className={classes.reset}\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.resetGroups}\n            >\n              Reset Groups\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <div className={classes.body}>\n          <FeatureDrawer\n            features={this.state.features}\n            values={this.state.values}\n            createSubgroups={this.createSubgroups}\n            dataDistrib={this.state.dataDistrib}\n            dataLoaded={this.state.dataLoaded}\n            hovered={this.state.hovered}\n            clicked={this.state.clicked}\n            activeGroups={this.state.activeGroups}\n          />\n          <div className={classes.content}>\n            <MetricSelector\n              className={classes.metricSelector}\n              onMetricChange={this.handleMetricsChange}\n              suggestions={METRICS}\n              selectedMetrics={this.state.selectedMetrics}\n            />\n            <div className={classes.plot}>\n              <StripPlot\n                activeGroups={this.state.activeGroups}\n                avgs={this.state.avgs}\n                barHover={this.barHover}\n                barClick={this.barClick}\n                minSize={this.state.minSize}\n                selectedMetrics={this.state.selectedMetrics}\n              />\n            </div>\n            <GroupSuggestions\n              clusters={this.state.clusters}\n              minSize={this.state.minSize}\n              suggestedHover={this.suggestedHover}\n              suggestedUnhover={this.suggestedUnhover}\n              suggestedClick={this.suggestedClick}\n              clustersLoaded={this.state.clustersLoaded}\n              features={this.state.features}\n              values={this.state.values}\n              clicked={this.state.clicked}\n              activeGroups={this.state.activeGroups}\n            />\n          </div>\n          <ExpandedCard\n            hovered={this.state.hovered}\n            clicked={this.state.clicked}\n            activeGroups={this.state.activeGroups}\n            selectedMetrics={this.state.selectedMetrics}\n            clusters={this.state.clusters}\n          />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}